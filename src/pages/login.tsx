import Container from "@/components/Layout/Container";
import Head from "next/head";
import InputText from "@/components/Layout/Controls/InputText";
import Link from "next/link";
import React, { FormEvent, useRef, useState } from "react";
import Router from "next/router";
import useTranslation from "next-translate/useTranslation";
import { ironOptions } from "@/lib/session";
import { routes } from "@/routes";
import { toast } from "react-hot-toast";
import { useCurrentUser } from "@/lib/hooks/useCurrentUser";
import { withIronSessionSsr } from "iron-session/next";
import type { NextPage } from "next";
import Button from "@/components/Layout/Controls/Button";

const LoginPage: NextPage = () => {
  /* Hooks */
  const { t } = useTranslation("common");
  const { user, login } = useCurrentUser();

  /* States */
  const refEmail = useRef<HTMLInputElement>(null);
  const refPassword = useRef<HTMLInputElement>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  /* Functions */
  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const toastLogin = toast.loading("Connexion en cours...", {
      //id: "toastLogin"
    });
    login(
      refEmail.current?.value ?? "",
      refPassword.current?.value ?? "",
      (err) => {
        if (err) {
          toast.error(err.message, {
            id: toastLogin,
          });
          setError(err.message);
        } else {
          toast.success("Vous êtes maintenant connecté !", {
            id: toastLogin,
          });
        }
        setLoading(false);
      }
    );
  };

  /* Existing user, redirect to home */
  if (user) Router.push(routes.home);

  /* Render */
  return (
    <>
      <Head>
        <title>NextJS Boilerplate - Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="min-h-main flex">
        <div className="flex-1 flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-20 xl:px-24">
          <div className="mx-auto w-full max-w-sm lg:w-96">
            <div className="text-center">
              {user && <h1>Vous êtes connecter en tant que {user.username}</h1>}
              <h2 className="text-3xl font-extrabold">{t("Login")}</h2>
              <p>
                {t("Login_description")}{" "}
                <Link
                  href={routes.register}
                  className="font-medium text-primary-500 hover:text-primary-400 transition-colors duration-200 ease-in-out"
                >
                  {t("Login_noAccount?")}
                </Link>
              </p>
            </div>

            <div className="mt-8">
              <div className="mt-6">
                <form
                  onChange={() => setError(null)}
                  onSubmit={handleSubmit}
                  className="space-y-5"
                >
                  <InputText
                    type={"email"}
                    ref={refEmail}
                    required
                    label={t("Email")}
                    name="email"
                    id="email"
                    additionnalClassname="w-full"
                  />
                  <InputText
                    type={"password"}
                    ref={refPassword}
                    label={t("Password")}
                    name="password"
                    id="password"
                    required
                    additionnalClassname="w-full"
                  />
                  <div className="flex items-center justify-end">
                    <div className="text-sm">
                      <a
                        href="#"
                        className="font-medium text-primary-500 hover:text-primary-400 transition-colors duration-200 ease-in-out"
                      >
                        {t("PasswordForgot?")}
                      </a>
                    </div>
                  </div>
                  <div>
                    <Button disabled={loading} type={"submit"}>
                      {t("Login")} {loading && <>...</>}
                    </Button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export const getServerSideProps = withIronSessionSsr(
  async function getServerSideProps({ req }) {
    const user = req.session.user;
    if (user !== undefined) {
      return {
        redirect: {
          destination: routes.home,
          permanent: false,
        },
      };
    }
    return {
      props: {
        //user: req.session.user,
      },
    };
  },
  ironOptions
);

export default LoginPage;
